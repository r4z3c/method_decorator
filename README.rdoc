= Method Decorator

Provides a way to dynamically override methods without losing original behavior.

== Example

For a given class (with unnecessary complex logic, just to make a point):

    class SomeClass

        def some_method(some_arg)
            puts some_arg
        end

        include MethodDecorator

        method_to_override = :some_method
        decorate_method method_to_override do |*args|
            puts :decorated_some_method
            call_original_method method_to_override, *args
        end

    end

This call:

    SomeClass.new.some_method 'some arg'

Produces this output:

    decorated_some_method
    some arg
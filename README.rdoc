= Method Decorator

Provides a way to dynamically overwrite methods without losing original behavior.

== Example

    class SomeClass

        def some_method(some_arg)
            puts some_arg
        end

    end

    MethodDecorator.decorate SomeClass, :some_method do |*args|
        puts :decorated_some_method
        MethodDecorator.call_original self, :some_method, *args
    end

This call:

    SomeClass.new.some_method 'some arg'

Produces this output:

    decorated_some_method
    some arg

== Singleton Classes Support

It works too:

    class SomeClass

        class << self

            def some_method(some_arg)
                puts some_arg
            end

        end

    end

    MethodDecorator.decorate SomeClass.singleton_class, :some_method do |*args|
        puts :decorated_some_method
        MethodDecorator.call_original self, :some_method, *args
    end

    SomeClass.some_method 'some arg'

===

{<img src="https://www.paypalobjects.com/en_US/i/btn/btn_donate_LG.gif" alt="Donate" />}[https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=AMPXM3PW6CTBE]
= Method Decorator

Provides a way to dynamically override methods without losing original behavior.

== Example

For a given class (with unnecessary complex logic, just to make a point):

    class SomeClass

        def some_method(some_arg)
            puts some_arg
        end

        include MethodDecorator

        method_to_override = :some_method
        original_method_name = original_method_name_for(method_to_override)
        decorate_method method_to_override do |some_arg|
            puts :decorated_some_method
            send original_method_name, some_arg
        end

    end

This call:

    SomeClass.new.some_method 'some arg'

Produces this output:

    decorated_some_method
    some arg

== Next moves

- Find a better way to call the original method, for now it's too verbose

    original_method_name = original_method_name_for(:some_method)
    ...
    send original_method_name, some_arg